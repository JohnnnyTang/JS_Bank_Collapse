import{v as R}from"./index-BG6QDKbA.js";class x{constructor(){this.lineNum=3e4,this.segmentNum=8,this.fullLife=this.segmentNum*10,this.progressRate=0,this.speedFactor=2,this.dropRate=.01,this.dropRateBump=.005,this.fillWidth=2,this.aaWidth=3,this.colorScheme=0,this.isUnsteady=!0,this.content="none",this.primitive=0,this.platform="mapbox no worker"}}class F{constructor(e){this.url="",this.flowFieldResourceArr=[],this.seedingResourceArr=[],this.projection2DResource="",this.projection3DResource="",this.flowFieldTexSize=[0,0],this.seedingTexSize=[0,0],this.projectionTexSize=[0,0],this.flowBoundary=[0,0,0,0],this.extent=[0,0,0,0],this.maxDropRate=0,this.maxDropRateBump=0,this.maxSegmentNum=0,this.maxTrajectoryNum=0,this.maxTextureSize=0,this.url=e}async Parsing(){await R.get(this.url).then(e=>{console.log("reponse::"+e);for(let a of e.data.flow_fields)this.flowFieldResourceArr.push(a);for(let a of e.data.area_masks)this.seedingResourceArr.push(a);this.projection2DResource=e.data.projection["2D"],this.flowFieldTexSize=e.data.texture_size.flow_field,this.seedingTexSize=e.data.texture_size.area_mask,this.projectionTexSize=e.data.texture_size.projection,this.flowBoundary[0]=e.data.flow_boundary.u_min,this.flowBoundary[1]=e.data.flow_boundary.v_min,this.flowBoundary[2]=e.data.flow_boundary.u_max,this.flowBoundary[3]=e.data.flow_boundary.v_max,this.extent[0]=e.data.extent[0],this.extent[1]=e.data.extent[1],this.extent[2]=e.data.extent[2],this.extent[3]=e.data.extent[3],this.maxDropRate=e.data.constraints.max_drop_rate,this.maxDropRateBump=e.data.constraints.max_drop_rate_bump,this.maxSegmentNum=e.data.constraints.max_segment_num,this.maxTrajectoryNum=e.data.constraints.max_streamline_num,this.maxTextureSize=e.data.constraints.max_texture_size})}}class p{constructor(e,a,s){this.map=null,this.GL=null,this.uboMapBufferData=new Float32Array(12),this.phaseCount=0,this.timePerFrame=100,this.timeLast=10,this.currentResourcePointer=0,this._timeCount=0,this._progressRate=0,this.textureArraySize=0,this.flowFieldTextureArr=[0,0,0],this.seedingTextureArr=[0,0,0],this.transformTexture=0,this.particleMapBufferData=new Float32Array(0),this.simulationBuffer=0,this.xfSimulationBuffer=0,this.lifeBuffer=0,this.xfLifeBuffer=0,this.BO=0,this.simulationVAO=0,this.simulationVAO2=0,this.XFO=0,this.XFO2=0,this.trajectoryPool=0,this.isReady=!1,this.renderVAO=0,this.renderVAO2=0,this.textureOffsetArray=[],this.beginBlock=-1,this.now_FFTextureArr=[0,0],this.now_SeedTextureArr=[0,0],this.now_sVAO=0,this.now_rVAO=0,this.now_XFO=0,this.now_XFBO=0,this.id=e,this.type="custom",this.renderingMode="2d",this.parser=new F(a),this.resourcePrefix=s,this.controller=new x}set progressRate(e){const a=Math.floor(this._progressRate*this.phaseCount)%this.phaseCount,s=Math.floor(e*this.phaseCount)%this.phaseCount,r=(s+1)%this.phaseCount;this._progressRate=e,this.now_FFTextureArr[0]=this.flowFieldTextureArr[s%this.textureArraySize],this.now_FFTextureArr[1]=this.flowFieldTextureArr[r%this.textureArraySize],this.now_SeedTextureArr[0]=this.seedingTextureArr[s%this.textureArraySize],this.now_SeedTextureArr[1]=this.seedingTextureArr[r%this.textureArraySize];let o=e*this.phaseCount;if(this.uboMapBufferData[0]=o-Math.floor(o),s!=a){this.currentResourcePointer=(this.currentResourcePointer+1)%this.phaseCount;let h=r%this.textureArraySize,t=this.GL;this.UpdateTextureByImage(t,this.flowFieldTextureArr[h],t.RG,t.LINEAR,this.parser.flowFieldTexSize[0],this.parser.flowFieldTexSize[1],this.parser.flowFieldResourceArr[r],"Float"),this.UpdateTextureByImage(t,this.seedingTextureArr[h],t.RGBA,t.NEAREST,this.parser.seedingTexSize[0],this.parser.seedingTexSize[1],this.parser.seedingResourceArr[r],"UNSIGHNED_BYTE")}}get progressRate(){return this._progressRate}set timeCount(e){this._timeCount=e%this.timeLast}get timeCount(){return this._timeCount}async init2ShadersFromSrc(e,a,s,r){const o=await R.get(a).then(u=>u.data).catch(u=>{console.log("ERROR::VERTEX_SHADER FILE NOT FOUND",u)}),h=await R.get(s).then(u=>u.data).catch(u=>{console.log("ERROR::FRAGMENT_SHADER FILE NOT FOUND",u)}),t=e.createShader(e.VERTEX_SHADER);e.shaderSource(t,o),e.compileShader(t);const n=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(n,h),e.compileShader(n);const d=e.createProgram();if(e.attachShader(d,t),e.attachShader(d,n),r&&e.transformFeedbackVaryings(d,r,e.SEPARATE_ATTRIBS),e.linkProgram(d),!e.getProgramParameter(d,e.LINK_STATUS)){console.log(e.getProgramInfoLog(d));return}return{program:d,vertexShader:t,fragmentShader:n}}async FillTextureByImage(e,a,s,r,o,h,t,n){let d=this.resourcePrefix+t;n==="Float"?R.get(d,{responseType:"blob"}).then(u=>{createImageBitmap(u.data,{imageOrientation:"flipY",premultiplyAlpha:"none",colorSpaceConversion:"default"}).then(f=>{const c=new Uint8Array(f.width*f.height*4),i=new OffscreenCanvas(f.width,f.height).getContext("webgl2"),A=i.createFramebuffer();i.bindFramebuffer(i.FRAMEBUFFER,A);const m=i.createTexture();i.bindTexture(i.TEXTURE_2D,m),i.texImage2D(i.TEXTURE_2D,0,i.RGBA8,f.width,f.height,0,i.RGBA,i.UNSIGNED_BYTE,f),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,m,0),i.readPixels(0,0,f.width,f.height,i.RGBA,i.UNSIGNED_BYTE,c),i.bindTexture(i.TEXTURE_2D,null),i.bindFramebuffer(i.FRAMEBUFFER,null),i.deleteTexture(m),i.deleteFramebuffer(A),i.finish(),e.bindTexture(e.TEXTURE_2D,a),e.texSubImage2D(e.TEXTURE_2D,0,0,0,o,h,e.RG,e.FLOAT,new Float32Array(c.buffer)),e.bindTexture(e.TEXTURE_2D,null),e.finish()})}):await R.get(d,{responseType:"blob"}).then(u=>{createImageBitmap(u.data,{imageOrientation:"flipY",premultiplyAlpha:"none",colorSpaceConversion:"default"}).then(f=>{e.bindTexture(e.TEXTURE_2D,a),e.texSubImage2D(e.TEXTURE_2D,0,0,0,o,h,s,e.UNSIGNED_BYTE,f),e.bindTexture(e.TEXTURE_2D,null),e.finish()})})}async UpdateTextureByImage(e,a,s,r,o,h,t,n){await this.FillTextureByImage(e,a,s,r,o,h,t,n)}FillBlockByData(e,a,s,r,o,h,t){e.bindTexture(e.TEXTURE_2D,a),e.pixelStorei(e.UNPACK_ALIGNMENT,1),e.texSubImage2D(e.TEXTURE_2D,0,s,r,o,h,e.RGB,e.FLOAT,t),e.bindTexture(e.TEXTURE_2D,null)}swap(){this.beginBlock%2==0?(this.now_sVAO=this.simulationVAO,this.now_rVAO=this.renderVAO,this.now_XFO=this.XFO,this.now_XFBO=this.simulationBuffer):(this.now_sVAO=this.simulationVAO2,this.now_rVAO=this.renderVAO2,this.now_XFO=this.XFO2,this.now_XFBO=this.xfSimulationBuffer)}async prepare(e){await this.parser.Parsing();const a=e.getSupportedExtensions();for(let t of a)e.getExtension(t);console.log(this.parser),this.parser.trajectoryNum=this.controller.lineNum,this.parser.segmentPrepare=this.parser.maxSegmentNum,this.parser.segmentNum=this.parser.maxSegmentNum,this.parser.maxBlockSize=Math.ceil(Math.sqrt(this.parser.maxTrajectoryNum)),this.phaseCount=this.parser.flowFieldResourceArr.length,this.timeLast=this.phaseCount*this.timePerFrame,this.textureArraySize=3;for(var s=0;s<this.textureArraySize;s++){let t=e.createTexture();e.bindTexture(e.TEXTURE_2D,t),e.texStorage2D(e.TEXTURE_2D,1,e.RG32F,this.parser.flowFieldTexSize[0],this.parser.flowFieldTexSize[1]),e.bindTexture(e.TEXTURE_2D,null),await this.FillTextureByImage(e,t,e.RG,e.LINEAR,this.parser.flowFieldTexSize[0],this.parser.flowFieldTexSize[1],this.parser.flowFieldResourceArr[s],"Float"),this.flowFieldTextureArr[s]=t;let n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texStorage2D(e.TEXTURE_2D,1,e.RGBA8,this.parser.seedingTexSize[0],this.parser.seedingTexSize[1]),e.bindTexture(e.TEXTURE_2D,null),await this.FillTextureByImage(e,n,e.RGBA,e.NEAREST,this.parser.seedingTexSize[0],this.parser.seedingTexSize[1],this.parser.seedingResourceArr[s],"UNSIGNED_BYTE"),this.seedingTextureArr[s]=n}let r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texStorage2D(e.TEXTURE_2D,1,e.RG32F,this.parser.projectionTexSize[0],this.parser.projectionTexSize[1]),e.bindTexture(e.TEXTURE_2D,null),await this.FillTextureByImage(e,r,e.RG,e.LINEAR,this.parser.projectionTexSize[0],this.parser.projectionTexSize[1],this.parser.projection2DResource,"Float"),this.transformTexture=r,this.particleMapBufferData=new Float32Array(this.parser.maxBlockSize*this.parser.maxBlockSize*3).fill(0);for(let t=0;t<this.parser.maxTrajectoryNum;t++)this.particleMapBufferData[t*3+0]=Math.random(),this.particleMapBufferData[t*3+1]=Math.random(),this.particleMapBufferData[t*3+2]=0;const o=new Float32Array(this.parser.maxTrajectoryNum);for(let t=0;t<this.parser.maxTrajectoryNum;t++)o[t]=this.parser.maxSegmentNum*9;this.simulationBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.simulationBuffer),e.bufferData(e.ARRAY_BUFFER,this.particleMapBufferData,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.xfSimulationBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.xfSimulationBuffer),e.bufferData(e.ARRAY_BUFFER,this.particleMapBufferData,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.lifeBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.lifeBuffer),e.bufferData(e.ARRAY_BUFFER,o,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.xfLifeBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.xfLifeBuffer),e.bufferData(e.ARRAY_BUFFER,o,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.simulationVAO=e.createVertexArray(),e.bindVertexArray(this.simulationVAO),e.bindBuffer(e.ARRAY_BUFFER,this.simulationBuffer),e.vertexAttribPointer(0,3,e.FLOAT,!1,3*4,0),e.enableVertexAttribArray(0),e.bindBuffer(e.ARRAY_BUFFER,this.lifeBuffer),e.vertexAttribPointer(1,1,e.FLOAT,!1,1*4,0),e.enableVertexAttribArray(1),e.bindVertexArray(null),e.bindBuffer(e.ARRAY_BUFFER,null),this.simulationVAO2=e.createVertexArray(),e.bindVertexArray(this.simulationVAO2),e.bindBuffer(e.ARRAY_BUFFER,this.xfSimulationBuffer),e.vertexAttribPointer(0,3,e.FLOAT,!1,3*4,0),e.enableVertexAttribArray(0),e.bindBuffer(e.ARRAY_BUFFER,this.xfLifeBuffer),e.vertexAttribPointer(1,1,e.FLOAT,!1,1*4,0),e.enableVertexAttribArray(1),e.bindVertexArray(null),e.bindBuffer(e.ARRAY_BUFFER,null),this.renderVAO=e.createVertexArray(),e.bindVertexArray(this.renderVAO),e.bindBuffer(e.ARRAY_BUFFER,this.lifeBuffer),e.vertexAttribPointer(0,1,e.FLOAT,!1,1*4,0),e.vertexAttribDivisor(0,1),e.enableVertexAttribArray(0),e.bindVertexArray(null),e.bindBuffer(e.ARRAY_BUFFER,null),this.renderVAO2=e.createVertexArray(),e.bindVertexArray(this.renderVAO2),e.bindBuffer(e.ARRAY_BUFFER,this.xfLifeBuffer),e.vertexAttribPointer(0,1,e.FLOAT,!1,1*4,0),e.vertexAttribDivisor(0,1),e.enableVertexAttribArray(0),e.bindVertexArray(null),e.bindBuffer(e.ARRAY_BUFFER,null),this.XFO=e.createTransformFeedback(),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,this.XFO),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,this.xfSimulationBuffer),e.bindBufferRange(e.TRANSFORM_FEEDBACK_BUFFER,0,this.xfSimulationBuffer,0,this.parser.maxBlockSize*this.parser.maxBlockSize*4*3),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,this.xfLifeBuffer),e.bindBufferRange(e.TRANSFORM_FEEDBACK_BUFFER,1,this.xfLifeBuffer,0,this.parser.maxBlockSize*this.parser.maxBlockSize*4),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,null),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,null),this.XFO2=e.createTransformFeedback(),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,this.XFO2),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,this.simulationBuffer),e.bindBufferRange(e.TRANSFORM_FEEDBACK_BUFFER,0,this.simulationBuffer,0,this.parser.maxBlockSize*this.parser.maxBlockSize*3*4),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,this.lifeBuffer),e.bindBufferRange(e.TRANSFORM_FEEDBACK_BUFFER,1,this.lifeBuffer,0,this.parser.maxBlockSize*this.parser.maxBlockSize*4),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,null),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,null),this.parser.maxBlockSize=Math.ceil(Math.sqrt(this.parser.maxTrajectoryNum)),this.parser.maxBlockColumn=Math.floor(this.parser.maxTextureSize/this.parser.maxBlockSize);for(let t=0;t<this.parser.maxSegmentNum;t++){let n={offsetX:this.parser.maxBlockSize*(t%this.parser.maxBlockColumn),offsetY:this.parser.maxBlockSize*Math.floor(t/this.parser.maxBlockColumn)};this.textureOffsetArray.push(n)}this.BO=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.BO),e.bufferData(e.ARRAY_BUFFER,48,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.trajectoryPool=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.trajectoryPool),e.texStorage2D(e.TEXTURE_2D,1,e.RGB32F,this.parser.maxTextureSize,this.parser.maxTextureSize),e.bindTexture(e.TEXTURE_2D,null);for(let t=0;t<this.parser.maxSegmentNum;t++)this.FillBlockByData(e,this.trajectoryPool,this.textureOffsetArray[t].offsetX,this.textureOffsetArray[t].offsetY,this.parser.maxBlockSize,this.parser.maxBlockSize,this.particleMapBufferData);let h=["newInfo","aliveTime"];this.updateShaderObj=await this.init2ShadersFromSrc(e,"/scratchSomething/flowWebGL/shaders/update.vert","/scratchSomething/flowWebGL/shaders/update.frag",h),this.trajectoryShaderObj=await this.init2ShadersFromSrc(e,"/scratchSomething/flowWebGL/shaders/trajectory.noCulling.vert","/scratchSomething/flowWebGL/shaders/trajectory.noCulling.frag"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.TRANSFORM_FEEDBACK_BUFFER,null),e.bindVertexArray(null),this.uboMapBufferData[8]=this.parser.flowBoundary[0],this.uboMapBufferData[9]=this.parser.flowBoundary[1],this.uboMapBufferData[10]=this.parser.flowBoundary[2],this.uboMapBufferData[11]=this.parser.flowBoundary[3],this.isReady=!0}tickfunc(e,a){this.beginBlock=(this.beginBlock+1)%this.parser.segmentNum,this.swap(),this.controller.isUnsteady&&(this.progressRate=this.timeCount/this.timeLast,this.timeCount=this.timeCount+1),this.uboMapBufferData[1]=this.parser.maxSegmentNum,this.uboMapBufferData[2]=this.parser.maxSegmentNum*10,this.uboMapBufferData[3]=this.controller.dropRate,this.uboMapBufferData[4]=this.controller.dropRateBump,this.uboMapBufferData[5]=this.controller.speedFactor*.01*100,this.uboMapBufferData[6]=this.controller.colorScheme,e.bindBuffer(e.UNIFORM_BUFFER,this.BO),e.bufferData(e.UNIFORM_BUFFER,this.uboMapBufferData,e.DYNAMIC_DRAW);let s=0;e.bindBufferRange(e.UNIFORM_BUFFER,s,this.BO,0,48),e.bindVertexArray(this.now_sVAO),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,this.now_XFO),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.now_FFTextureArr[0]),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,this.now_FFTextureArr[1]),e.activeTexture(e.TEXTURE2),e.bindTexture(e.TEXTURE_2D,this.now_SeedTextureArr[0]),e.activeTexture(e.TEXTURE3),e.bindTexture(e.TEXTURE_2D,this.now_SeedTextureArr[1]),e.useProgram(this.updateShaderObj.program);let r=null;r=e.getUniformLocation(this.updateShaderObj.program,"flowField"),e.uniform1iv(r,[0,1]),r=e.getUniformLocation(this.updateShaderObj.program,"mask"),e.uniform1iv(r,[2,3]),r=e.getUniformLocation(this.updateShaderObj.program,"randomSeed"),e.uniform1f(r,Math.random());let o=0;if(o=e.getUniformBlockIndex(this.updateShaderObj.program,"FlowFieldUniforms"),e.uniformBlockBinding(this.updateShaderObj.program,o,s),e.enable(e.RASTERIZER_DISCARD),e.beginTransformFeedback(e.POINTS),e.drawArrays(e.POINTS,0,this.parser.trajectoryNum),e.endTransformFeedback(),e.disable(e.RASTERIZER_DISCARD),e.bindVertexArray(null),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,null),e.bindBuffer(e.PIXEL_UNPACK_BUFFER,this.now_XFBO),e.bindTexture(e.TEXTURE_2D,this.trajectoryPool),e.pixelStorei(e.UNPACK_ALIGNMENT,1),e.texSubImage2D(e.TEXTURE_2D,0,this.textureOffsetArray[this.beginBlock].offsetX,this.textureOffsetArray[this.beginBlock].offsetY,this.parser.maxBlockSize,this.parser.maxBlockSize,e.RGB,e.FLOAT,0),e.bindTexture(e.TEXTURE_2D,null),e.bindBuffer(e.PIXEL_UNPACK_BUFFER,null),e.finish(),this.parser.segmentPrepare>0){this.parser.segmentPrepare--;return}e.bindVertexArray(this.now_rVAO),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.trajectoryPool),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,this.transformTexture),e.disable(e.DEPTH_TEST),e.useProgram(this.trajectoryShaderObj.program),r=e.getUniformLocation(this.trajectoryShaderObj.program,"particlePool"),e.uniform1i(r,0),r=e.getUniformLocation(this.trajectoryShaderObj.program,"projectionTexture"),e.uniform1i(r,1),r=e.getUniformLocation(this.trajectoryShaderObj.program,"blockNum"),e.uniform1i(r,this.parser.maxSegmentNum),r=e.getUniformLocation(this.trajectoryShaderObj.program,"beginBlock"),e.uniform1i(r,this.beginBlock),r=e.getUniformLocation(this.trajectoryShaderObj.program,"blockSize"),e.uniform1i(r,this.parser.maxBlockSize),r=e.getUniformLocation(this.trajectoryShaderObj.program,"fillWidth"),e.uniform1f(r,this.controller.fillWidth),r=e.getUniformLocation(this.trajectoryShaderObj.program,"aaWidth"),e.uniform1f(r,this.controller.aaWidth),r=e.getUniformLocation(this.trajectoryShaderObj.program,"viewport"),e.uniform2f(r,e.canvas.width,e.canvas.height),r=e.getUniformLocation(this.trajectoryShaderObj.program,"u_matrix"),e.uniformMatrix4fv(r,!1,a),o=e.getUniformBlockIndex(this.trajectoryShaderObj.program,"FlowFieldUniforms"),e.uniformBlockBinding(this.trajectoryShaderObj.program,o,s),e.drawArraysInstanced(e.TRIANGLE_STRIP,0,(this.parser.segmentNum-1)*2,this.parser.trajectoryNum),e.bindVertexArray(null),e.bindTexture(e.TEXTURE_2D,null)}async onAdd(e,a){this.GL=a,this.map=e,await this.prepare(a)}render(e,a){if(!this.isReady){this.map?.triggerRepaint();return}this.tickfunc(e,a),this.map?.triggerRepaint()}}export{p as F};

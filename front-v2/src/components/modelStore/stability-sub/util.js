export const demoJson = {
    date: '2023-09-01',
    vertex: [
        ['13417691', '3767754'],
        ['13417931', '3767270'],
    ],
    scene: 'minzhusha',
    dataFolderPath: 'D:\\project\\JS_Bank_Collapse\\util\\model\\multi\\data',
    section: [
        [13417687.957079306, 3767755.8293190524, 3.121534824371338],
        [13417687.957079306, 3767750.8293190524, 3.1434929370880127],
        [13417692.957079306, 3767745.8293190524, 3.247708320617676],
        [13417692.957079306, 3767740.8293190524, 3.2636892795562744],
        [13417697.957079306, 3767735.8293190524, 3.291696786880493],
        [13417697.957079306, 3767730.8293190524, 3.299565553665161],
        [13417702.957079306, 3767725.8293190524, 3.299978733062744],
        [13417702.957079306, 3767720.8293190524, 3.299994468688965],
        [13417707.957079306, 3767715.8293190524, 3.2999579906463623],
        [13417707.957079306, 3767710.8293190524, 3.2996816635131836],
        [13417712.957079306, 3767705.8293190524, 3.296473979949951],
        [13417712.957079306, 3767700.8293190524, 3.2823452949523926],
        [13417717.957079306, 3767695.8293190524, 3.2385687828063965],
        [13417717.957079306, 3767690.8293190524, 3.189035654067993],
        [13417722.957079306, 3767685.8293190524, 3.067615032196045],
        [13417722.957079306, 3767680.8293190524, 3.028134822845459],
        [13417727.957079306, 3767675.8293190524, 3.001678943634033],
        [13417727.957079306, 3767670.8293190524, 2.9994516372680664],
        [13417732.957079306, 3767665.8293190524, 2.9988670349121094],
        [13417732.957079306, 3767660.8293190524, 2.9878454208374023],
        [13417737.957079306, 3767655.8293190524, 2.9787704944610596],
        [13417737.957079306, 3767650.8293190524, 2.899057388305664],
        [13417742.957079306, 3767645.8293190524, 2.9546520709991455],
        [13417742.957079306, 3767640.8293190524, 2.847874164581299],
        [13417747.957079306, 3767635.8293190524, 2.8334996700286865],
        [13417747.957079306, 3767630.8293190524, 2.8156447410583496],
        [13417752.957079306, 3767625.8293190524, 2.8378868103027344],
        [13417752.957079306, 3767620.8293190524, 2.8585641384124756],
        [13417757.957079306, 3767615.8293190524, 2.8983511924743652],
        [13417757.957079306, 3767610.8293190524, 2.5130932331085205],
        [13417762.957079306, 3767605.8293190524, 1.9344098567962646],
        [13417762.957079306, 3767600.8293190524, -1.7289330959320068],
        [13417767.957079306, 3767595.8293190524, -13.831005096435547],
        [13417767.957079306, 3767590.8293190524, -17.1885986328125],
        [13417772.957079306, 3767585.8293190524, -17.408037185668945],
        [13417772.957079306, 3767580.8293190524, -17.806724548339844],
        [13417777.957079306, 3767575.8293190524, -17.77374267578125],
        [13417777.957079306, 3767570.8293190524, -17.518352508544922],
        [13417782.957079306, 3767565.8293190524, -17.223793029785156],
        [13417782.957079306, 3767560.8293190524, -16.875864028930664],
        [13417787.957079306, 3767555.8293190524, -16.53278160095215],
        [13417787.957079306, 3767550.8293190524, -16.165775299072266],
        [13417792.957079306, 3767545.8293190524, -16.063810348510742],
        [13417792.957079306, 3767540.8293190524, -15.54920768737793],
        [13417797.957079306, 3767535.8293190524, -14.938090324401855],
        [13417797.957079306, 3767530.8293190524, -14.127363204956055],
        [13417802.957079306, 3767525.8293190524, -13.364641189575195],
        [13417802.957079306, 3767520.8293190524, -12.430339813232422],
        [13417807.957079306, 3767515.8293190524, -11.678702354431152],
        [13417807.957079306, 3767510.8293190524, -11.449407577514648],
        [13417812.957079306, 3767505.8293190524, -9.874521255493164],
        [13417812.957079306, 3767500.8293190524, -8.721687316894531],
        [13417817.957079306, 3767495.8293190524, -6.497688293457031],
        [13417817.957079306, 3767490.8293190524, -6.655665397644043],
        [13417822.957079306, 3767485.8293190524, -8.162154197692871],
        [13417822.957079306, 3767480.8293190524, -8.65102481842041],
        [13417827.957079306, 3767475.8293190524, -11.075912475585938],
        [13417827.957079306, 3767470.8293190524, -11.722530364990234],
        [13417832.957079306, 3767465.8293190524, -13.258783340454102],
        [13417832.957079306, 3767460.8293190524, -13.783803939819336],
        [13417837.957079306, 3767455.8293190524, -14.561233520507812],
        [13417837.957079306, 3767450.8293190524, -14.897319793701172],
        [13417842.957079306, 3767445.8293190524, -14.745083808898926],
        [13417842.957079306, 3767440.8293190524, -14.91735553741455],
        [13417847.957079306, 3767435.8293190524, -14.65709114074707],
        [13417847.957079306, 3767430.8293190524, -13.974665641784668],
        [13417852.957079306, 3767425.8293190524, -13.366701126098633],
        [13417852.957079306, 3767420.8293190524, -15.094374656677246],
        [13417857.957079306, 3767415.8293190524, -16.2069149017334],
        [13417857.957079306, 3767410.8293190524, -17.09683609008789],
        [13417862.957079306, 3767405.8293190524, -18.026731491088867],
        [13417862.957079306, 3767400.8293190524, -18.64005470275879],
        [13417867.957079306, 3767395.8293190524, -19.124711990356445],
        [13417867.957079306, 3767390.8293190524, -19.64112091064453],
        [13417872.957079306, 3767385.8293190524, -19.74228286743164],
        [13417872.957079306, 3767380.8293190524, -19.911325454711914],
        [13417877.957079306, 3767375.8293190524, -20.222097396850586],
        [13417877.957079306, 3767370.8293190524, -21.015077590942383],
        [13417882.957079306, 3767365.8293190524, -21.347070693969727],
        [13417882.957079306, 3767360.8293190524, -22.014921188354492],
        [13417887.957079306, 3767355.8293190524, -22.594650268554688],
        [13417887.957079306, 3767350.8293190524, -23.058412551879883],
        [13417892.957079306, 3767345.8293190524, -22.975597381591797],
        [13417892.957079306, 3767340.8293190524, -23.3878173828125],
        [13417897.957079306, 3767335.8293190524, -23.70122718811035],
        [13417897.957079306, 3767330.8293190524, -24.130123138427734],
        [13417902.957079306, 3767325.8293190524, -24.493906021118164],
        [13417902.957079306, 3767320.8293190524, -24.88259506225586],
        [13417907.957079306, 3767315.8293190524, -25.026247024536133],
        [13417907.957079306, 3767310.8293190524, -25.398527145385742],
        [13417912.957079306, 3767305.8293190524, -25.830562591552734],
        [13417912.957079306, 3767300.8293190524, -26.824321746826172],
        [13417917.957079306, 3767295.8293190524, -26.83916473388672],
        [13417917.957079306, 3767290.8293190524, -27.092004776000977],
        [13417922.957079306, 3767285.8293190524, -26.90294075012207],
        [13417922.957079306, 3767280.8293190524, -26.982824325561523],
        [13417927.957079306, 3767275.8293190524, -27.218549728393555],
        [13417927.957079306, 3767270.8293190524, -27.60082244873047],
    ],
    isSectionWithInArea: [true, true],
    PQ: [[0, 1, 0, 0], '低风险', 0.8],
    KY: [[0, 0, 0, 1], '较高风险', 0.9067293380808618],
    ZD: [[0, 0, 0, 1], '较高风险', 0.8233316221765914],
    deepestPoint: [
        [13417687.957079306, 3767755.8293190524],
        3.896,
        1.797,
        2.4285,
    ],
    ZB: [[1, 0, 0, 0], '较低风险', 3.896],
    SA: [
        [0, 1, 0, 0],
        '低风险',
        [
            0.008508098125457764, 0.00041306018829345703, -0.003069460391998291,
            -0.011844491958618164, -0.0011454224586486816,
            -0.007263541221618652, 0.0032425761222839356, -0.8364678144454956,
            -0.19713687896728516, 0.06204805374145508, 0.07973456382751465,
            0.16296939849853515, 0.25905070304870603, -0.2289112091064453,
            -0.17426605224609376, -0.0047928810119628905, -0.0774911880493164,
            -0.14588985443115235, -0.05486927032470703, -0.11862764358520508,
            -0.0553288459777832, -0.06625099182128906, -0.0906458854675293,
            -0.018969249725341798, -0.07645454406738281,
        ],
    ],
    LN: [
        [0, 0, 0, 1],
        '较高风险',
        [
            -0.0014290809631347656, -0.024257421493530273,
            -0.006379842758178711, -0.000362396240234375,
            -2.0742416381835938e-5, -5.245208740234375e-6,
            -1.6689300537109375e-6, -0.0005278587341308594,
            -0.00018072128295898438, -0.006606340408325195,
            -0.013387203216552734, -0.0712432861328125, -0.07682418823242188,
            -0.0541994571685791, -0.03546714782714844, -0.002198934555053711,
            -0.38700222969055176, -0.9655985832214355, -4.628930568695068,
            -16.731022119522095, -20.088642597198486, -20.309069633483887,
            -20.725111722946167, -21.088707208633423, -22.950204372406006,
            -23.242689609527588, -22.804797172546387, -22.426447868347168,
            -21.78517246246338, -14.056722640991211, -12.477280378341675,
            -11.654539346694946, -10.704403400421143, -9.916126251220703,
            -8.661474227905273, -6.875741004943848, -5.015869617462158,
            -2.245750904083252,
        ],
    ],
    beforeSection: [
        [13417688.69359842, 3767754.371655211, 3.1229639053344727],
        [13417693.69359842, 3767749.371655211, 3.1159889698028564],
        [13417693.69359842, 3767744.371655211, 3.239731550216675],
        [13417693.69359842, 3767739.371655211, 3.2879467010498047],
        [13417698.69359842, 3767734.371655211, 3.298076629638672],
        [13417703.69359842, 3767729.371655211, 3.2999279499053955],
        [13417703.69359842, 3767724.371655211, 3.299999475479126],
        [13417703.69359842, 3767719.371655211, 3.299999713897705],
        [13417708.69359842, 3767714.371655211, 3.299959659576416],
        [13417713.69359842, 3767709.371655211, 3.2978639602661133],
        [13417713.69359842, 3767704.371655211, 3.2888548374176025],
        [13417713.69359842, 3767699.371655211, 3.247558116912842],
        [13417718.69359842, 3767694.371655211, 3.1743929386138916],
        [13417723.69359842, 3767689.371655211, 3.121018171310425],
        [13417723.69359842, 3767684.371655211, 3.0371713638305664],
        [13417723.69359842, 3767679.371655211, 3.010349988937378],
        [13417728.69359842, 3767674.371655211, 3.0003602504730225],
        [13417733.69359842, 3767669.371655211, 2.9999794960021973],
        [13417733.69359842, 3767664.371655211, 2.9990477561950684],
        [13417733.69359842, 3767659.371655211, 2.9944517612457275],
        [13417738.69359842, 3767654.371655211, 2.9921576976776123],
        [13417743.69359842, 3767649.371655211, 2.9703006744384766],
        [13417743.69359842, 3767644.371655211, 2.8455734252929688],
        [13417743.69359842, 3767639.371655211, 2.8091800212860107],
        [13417748.69359842, 3767634.371655211, 2.8179984092712402],
        [13417753.69359842, 3767629.371655211, 2.8924689292907715],
        [13417753.69359842, 3767624.371655211, 2.8920862674713135],
        [13417753.69359842, 3767619.371655211, 2.894031286239624],
        [13417758.69359842, 3767614.371655211, 2.900550127029419],
        [13417763.69359842, 3767609.371655211, 2.9000954627990723],
        [13417763.69359842, 3767604.371655211, 2.9000084400177],
        [13417763.69359842, 3767599.371655211, 2.8999974727630615],
        [13417768.69359842, 3767594.371655211, 2.900017023086548],
        [13417773.69359842, 3767589.371655211, 2.9000439643859863],
        [13417773.69359842, 3767584.371655211, 2.9010324478149414],
        [13417773.69359842, 3767579.371655211, 2.9183871746063232],
        [13417778.69359842, 3767574.371655211, 3.314964532852173],
        [13417783.69359842, 3767569.371655211, 5.431851863861084],
        [13417783.69359842, 3767564.371655211, 6.018896579742432],
        [13417783.69359842, 3767559.371655211, 5.928933143615723],
        [13417788.69359842, 3767554.371655211, 5.8936662673950195],
        [13417793.69359842, 3767549.371655211, 5.619397163391113],
        [13417793.69359842, 3767544.371655211, -2.0070877075195312],
        [13417793.69359842, 3767539.371655211, -3.071927309036255],
        [13417798.69359842, 3767534.371655211, -3.283550977706909],
        [13417803.69359842, 3767529.371655211, -3.422959804534912],
        [13417803.69359842, 3767524.371655211, -3.448514938354492],
        [13417803.69359842, 3767519.371655211, -3.7688655853271484],
        [13417808.69359842, 3767514.371655211, -4.802961349487305],
        [13417813.69359842, 3767509.371655211, -6.43353796005249],
        [13417813.69359842, 3767504.371655211, -7.628770351409912],
        [13417813.69359842, 3767499.371655211, -8.946449279785156],
        [13417818.69359842, 3767494.371655211, -9.244831085205078],
        [13417823.69359842, 3767489.371655211, -10.476202964782715],
        [13417823.69359842, 3767484.371655211, -12.233419418334961],
        [13417823.69359842, 3767479.371655211, -13.30055046081543],
        [13417828.69359842, 3767474.371655211, -14.014792442321777],
        [13417833.69359842, 3767469.371655211, -14.270424842834473],
        [13417833.69359842, 3767464.371655211, -14.97888469696045],
        [13417833.69359842, 3767459.371655211, -15.168658256530762],
        [13417838.69359842, 3767454.371655211, -16.535743713378906],
        [13417843.69359842, 3767449.371655211, -17.253616333007812],
        [13417843.69359842, 3767444.371655211, -17.6441650390625],
        [13417843.69359842, 3767439.371655211, -18.0341854095459],
        [13417848.69359842, 3767434.371655211, -18.871644973754883],
        [13417853.69359842, 3767429.371655211, -19.163223266601562],
        [13417853.69359842, 3767424.371655211, -19.695068359375],
        [13417853.69359842, 3767419.371655211, -20.70911407470703],
        [13417858.69359842, 3767414.371655211, -21.725101470947266],
        [13417863.69359842, 3767409.371655211, -22.625085830688477],
        [13417863.69359842, 3767404.371655211, -23.037151336669922],
        [13417863.69359842, 3767399.371655211, -23.50472640991211],
        [13417868.69359842, 3767394.371655211, -23.62897491455078],
        [13417873.69359842, 3767389.371655211, -24.318498611450195],
        [13417873.69359842, 3767384.371655211, -25.25609588623047],
        [13417873.69359842, 3767379.371655211, -26.168140411376953],
        [13417878.69359842, 3767374.371655211, -26.721012115478516],
        [13417883.69359842, 3767369.371655211, -27.352996826171875],
        [13417883.69359842, 3767364.371655211, -27.534730911254883],
        [13417883.69359842, 3767359.371655211, -28.3227596282959],
        [13417888.69359842, 3767354.371655211, -28.664649963378906],
        [13417893.69359842, 3767349.371655211, -28.916494369506836],
        [13417893.69359842, 3767344.371655211, -29.92958641052246],
        [13417893.69359842, 3767339.371655211, -30.606996536254883],
        [13417898.69359842, 3767334.371655211, -31.010469436645508],
        [13417903.69359842, 3767329.371655211, -31.10230827331543],
        [13417903.69359842, 3767324.371655211, -31.232851028442383],
        [13417903.69359842, 3767319.371655211, -31.465221405029297],
        [13417908.69359842, 3767314.371655211, -31.98632049560547],
        [13417913.69359842, 3767309.371655211, -32.619144439697266],
        [13417913.69359842, 3767304.371655211, -32.685813903808594],
        [13417913.69359842, 3767299.371655211, -32.63957214355469],
        [13417918.69359842, 3767294.371655211, -32.676307678222656],
        [13417923.69359842, 3767289.371655211, -32.96323013305664],
        [13417923.69359842, 3767284.371655211, -33.133304595947266],
        [13417923.69359842, 3767279.371655211, -33.098289489746094],
        [13417928.69359842, 3767274.371655211, -32.94529724121094],
    ],
    risk: [[0.08, 0.32, 0.0, 0.6], '高风险', 0.6],
}

export function convertToMercator(lonLat) {
    var D2R = Math.PI / 180,
        // 900913 properties
        A = 6378137.0,
        MAXEXTENT = 20037508.342789244

    // compensate longitudes passing the 180th meridian
    // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js
    var adjusted =
        Math.abs(lonLat[0]) <= 180
            ? lonLat[0]
            : lonLat[0] - Math.sign(lonLat[0]) * 360
    var xy = [
        A * adjusted * D2R,
        A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R)),
    ]

    // if xy value is beyond maxextent (e.g. poles), return maxextent
    if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT
    if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT
    if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT
    if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT

    return xy
}

export const addLineToMap = (map, start, end, id) => {
    if (!map.getSource(`${id}-source`)) {
        const feature = {
            type: 'Feature',
            properties: {},
            geometry: {
                coordinates: [start, end],
                type: 'LineString',
            },
        }
        map.addSource(`${id}-source`, {
            type: 'geojson',
            data: feature,
        })
    }
    if (map.getLayer(`${id}-layer`)) {
        map.setLayoutProperty(`${id}-layer`, 'visibility', 'visible') // 设置图层可见性
    } else {
        map.addLayer({
            id: `${id}-layer`,
            type: 'line',
            source: `${id}-source`,
            layout: {
                'line-join': 'round',
                'line-cap': 'round',
                visibility: 'visible',
            },
            paint: {
                'line-color': '#888',
                'line-width': 8,
            },
        })
    }
}

export const hideLayer = (map, id) => {
    if (map.getLayer(`${id}-layer`)) {
        map.setLayoutProperty(`${id}-layer`, 'visibility', 'none') // 设置图层可见性
    }
}

export const deleteLineFromMap = (map, id) => {
    if (map.getLayer(`${id}-layer`)) {
        map.removeLayer(`${id}-layer`)
    }
    if (map.getSource(`${id}-source`)) {
        map.removeSource(`${id}-source`)
    }
}

/**
 *
 * @param {any} echarts
 * @param {number[]} current
 * @param {number[]} before
 * @param {number} deepestPoint
 */
export const drawSectionGraph = (echarts, current, before) => {
    console.log(current, before)
    const min = Math.min(...current, ...before)
    const max = Math.max(...current, ...before)
    const length = Math.min(current.length, before.length)
    const option = {
        title: {
            text: '断面形态',
        },
        grid: {
            width: '80%',
            height: '80%',
            top: '10%',
            show: true,
            backgroundColor: '#d2f2ff',
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985',
                },
            },
        },
        legend: {
            data: ['当前横截面', '对比横截面'],
            right: '10%',
            top: '2%',
        },
        xAxis: {
            type: 'category',
            data: new Array(length).fill(0).map((_, index) => index * 5),
            position: 'bottom',
        },
        yAxis: {
            type: 'value',
            splitLine: {
                show: false,
            },
            axisLine: {
                show: false,
            },
            scale: true,
            max: Math.round(max + 2),
            min: Math.round(min - 2),
        },
        series: [
            {
                name: '当前横截面',
                data: current.slice(0, length).map((value) => value.toFixed(2)),
                type: 'line',
                smooth: true,
                // symbol: 'circle',
                areaStyle: {
                    opacity: 0.8,
                    color: '#2a5fdb',
                },
            },
            {
                name: '对比横截面',
                data: before.slice(0, length).map((value) => value.toFixed(2)),
                type: 'line',
                smooth: true,
                // symbol: 'circle',
                lineStyle: {
                    color: '#ff7070',
                },
                itemStyle: {
                    color: '#ff7070',
                },
            },
        ],
    }

    echarts.setOption(option)
}

export const drawChongyuSectionGraph = (echarts, points) => {
    const min = Math.min(...points)
    const max = Math.max(...points)
    const option = {
        title: {
            text: '断面冲淤',
        },
        grid: {
            width: '80%',
            height: '80%',
            top: '10%',
            show: true,
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985',
                },
            },
        },
        xAxis: {
            type: 'category',
            data: points.map((_, index) => index * 5),
            position: 'bottom',
        },
        yAxis: {
            type: 'value',
            splitLine: {
                show: false,
            },
            axisLine: {
                show: false,
            },
            scale: true,
            max: Math.round(max + 2),
            min: Math.round(min - 2),
        },
        series: [
            {
                name: '冲淤程度',
                data: points.map((value) => value.toFixed(2)),
                type: 'line',
                smooth: true,
                // symbol: 'circle',
                // areaStyle: {
                //     opacity: 0.8,
                //     color: '#2a5fdb',
                // },
            },
        ],
    }

    echarts.setOption(option)
}

/**
 *
 * @param {any} echarts
 * @param {number[]} before
 *  @param {number[]} after
 * @param {number[]} rates
 */
export const drawRateGraph = (echarts, after, before, rates) => {
    const min = Math.min(...after, ...before)
    const max = Math.max(...after, ...before)

    const length = Math.min(after.length, before.length)
    const splitPoint = []
    for (let index = 0; index < length; index += 10) {
        splitPoint.push(index)
    }
    splitPoint.push(length - 1)

    const ratePoints = []
    for (
        let index = 0, rateIndex = 0;
        index < splitPoint.length;
        index++, rateIndex++
    ) {
        if (index !== splitPoint.length - 1) {
            const start = splitPoint[index]
            const end = splitPoint[index + 1]
            for (let j = start; j < end; j++) {
                ratePoints.push(rates[rateIndex])
            }
        }
    }

    const colors = ['#5c7bd9', '#ff7070']
    const pieces = (() => {
        const result = []
        const length = splitPoint.length
        splitPoint.forEach((value, index) => {
            if (index !== length - 1) {
                result.push({
                    gt: value,
                    lt: splitPoint[index + 1],
                    color: colors[index % 2],
                })
            }
        })
        return result
    })()

    const option = {
        title: {
            text: '断面坡比',
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985',
                },
            },
        },
        grid: [
            {
                top: '10%',
                height: '40%',
                show: true,
            },
            {
                top: '58%',
                height: '35%',
                show: true,
            },
        ],
        legend: {
            data: ['当前横截面', '对比横截面', '坡比'],
            right: '10%',
            top: '2%',
        },
        axisPointer: {
            link: [
                {
                    xAxisIndex: 'all',
                },
            ],
        },
        xAxis: [
            {
                type: 'category',
                data: before.map((_, index) => index * 5),
                position: 'bottom',
                //  axisLabel:{
                //     show:false
                //  }
            },
            {
                gridIndex: 1,
                type: 'category',
                data: ratePoints.map((_, index) => index * 5),
                position: 'bottom',
                axisLine: {
                    show: true,
                    onZero: false,
                },
            },
        ],
        yAxis: [
            {
                type: 'value',
                splitLine: {
                    show: false,
                },
                scale: true,
                max: Math.round(max + 1),
                min: Math.round(min - 1),
            },
            {
                type: 'value',
                splitLine: {
                    show: false,
                },
                gridIndex: 1,
                axisLine: {
                    show: false,
                },
                scale: true,
            },
        ],
        series: [
            {
                name: '当前横截面',
                type: 'line',
                smooth: true,
                data: after.map((value) => value.toFixed(2)),
            },
            {
                name: '对比横截面',
                type: 'line',
                smooth: true,
                data: before.map((value) => value.toFixed(2)),
                lineStyle: {
                    color: '#ff7070',
                },
                itemStyle: {
                    color: '#ff7070',
                },
            },
            {
                name: '坡比',
                type: 'bar',
                smooth: true,
                data: ratePoints.map((value) => value.toFixed(4)),
                yAxisIndex: 1,
                xAxisIndex: 1,
                barCategoryGap: '0%',
                itemStyle: {
                    normal: {
                        color: function (params) {
                            let tempIndex = 0
                            splitPoint.some((value, index) => {
                                if (params.dataIndex < value) {
                                    tempIndex = index - 1
                                    return true
                                }
                            })
                            const colorList = ['#059669', '#84cc16']
                            return colorList[tempIndex % 2]
                        },
                        label: {
                            show: false,
                        },
                    },
                },
            },
        ],
    }
    echarts.setOption(option)
}
